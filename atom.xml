<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小驴球的技术积累</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://njustlcx.github.io/"/>
  <updated>2019-03-09T12:01:50.825Z</updated>
  <id>https://njustlcx.github.io/</id>
  
  <author>
    <name>小驴球</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://njustlcx.github.io/2019/03/09/Java%E7%BA%BF%E7%A8%8B%E4%B8%ADstart%E6%96%B9%E6%B3%95%E5%92%8Crun%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://njustlcx.github.io/2019/03/09/Java线程中start方法和run方法的区别/</id>
    <published>2019-03-09T10:02:33.000Z</published>
    <updated>2019-03-09T12:01:50.825Z</updated>
    
    <content type="html"><![CDATA[<p>java中执行一个线程需要重写<code>Thread</code>类中的<code>run()</code>方法，而在Thread类中还存在一个<code>start()</code>方法。本文将分析start()方法和run()方法的区别。</p><p>首先看一段java代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">greeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello!"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Current Thread is : "</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                greeting();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">"Current main thread is : "</span> + Thread.currentThread().getName());</span><br><span class="line">        t.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，ThreadTest类中定义了一个greeting()方法，在main函数中，新建了一个Thread对象，并实现了Thread类的run方法，run()方法里面调用了ThreadTest类的greeting()方法。最后通过Thread实例的run()方法来执行。执行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Current main thread is : main</span><br><span class="line">hello!</span><br><span class="line">Current Thread is : main</span><br></pre></td></tr></table></figure><p>执行结果表明，调用run()方法的线程是主线程。由此可见，通过Thread对象调用run()方法并没有创建一个子线程去执行，而是相当于一个普通方法的调用。</p><p>对上述代码进行修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">greeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello!"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Current Thread is : "</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                greeting();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">"Current main thread is : "</span> + Thread.currentThread().getName());</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过t.run()改为了t.start()，执行结果怎么样呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Current main thread is : main</span><br><span class="line">hello!</span><br><span class="line">Current Thread is : Thread-<span class="number">0</span></span><br></pre></td></tr></table></figure><p>根据执行结果发现，通过start()方法的调用，会创建一个子线程来执行重写过的run()方法。</p><p>由此，我们可以得出两者的区别：</p><p><strong>调用start()方法会创建一个新的子线程并启动，调用run()方法只相当于一个普通方法的调用。</strong></p><p>那到底是什么原因导致的呢，我们要从源码层面进行分析。</p><p>查看Thread类中的start()方法，方法实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is not invoked for the main method thread or "system"</span></span><br><span class="line"><span class="comment">     * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">     * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * A zero status value corresponds to state "NEW".</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">     * so that it can be added to the group's list of threads</span></span><br><span class="line"><span class="comment">     * and the group's unstarted count can be decremented. */</span></span><br><span class="line">    group.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 主要调用了start0()方法</span></span><br><span class="line">        start0();</span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">              it will be passed up the call stack */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从start()方法的源码可以看出，start()方法主要是调用了start0()方法去执行任务的。所以我们需要继续查看start0()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>start0()方法是一个native方法，因此，我们需要查看start0()这个native方法的实现过程。我们可以通过openjdk去查看start0()方法对应的native方法。</p><p>源码地址如下：</p><p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/f0b93fbd8cf8/src/share/native/java/lang/Thread.c" target="_blank" rel="noopener">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/f0b93fbd8cf8/src/share/native/java/lang/Thread.c</a></p><p>我们找出start0方法相关的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> JNINativeMethod methods[] = &#123;</span><br><span class="line">    &#123;<span class="string">"start0"</span>,           <span class="string">"()V"</span>,        (<span class="keyword">void</span> *)&amp;JVM_StartThread&#125;,</span><br><span class="line">    &#123;<span class="string">"stop0"</span>,            <span class="string">"("</span> OBJ <span class="string">")V"</span>, (<span class="keyword">void</span> *)&amp;JVM_StopThread&#125;,</span><br><span class="line">    &#123;<span class="string">"isAlive"</span>,          <span class="string">"()Z"</span>,        (<span class="keyword">void</span> *)&amp;JVM_IsThreadAlive&#125;,</span><br><span class="line">    &#123;<span class="string">"suspend0"</span>,         <span class="string">"()V"</span>,        (<span class="keyword">void</span> *)&amp;JVM_SuspendThread&#125;,</span><br><span class="line">    &#123;<span class="string">"resume0"</span>,          <span class="string">"()V"</span>,        (<span class="keyword">void</span> *)&amp;JVM_ResumeThread&#125;,</span><br><span class="line">    &#123;<span class="string">"setPriority0"</span>,     <span class="string">"(I)V"</span>,       (<span class="keyword">void</span> *)&amp;JVM_SetThreadPriority&#125;,</span><br><span class="line">    &#123;<span class="string">"yield"</span>,            <span class="string">"()V"</span>,        (<span class="keyword">void</span> *)&amp;JVM_Yield&#125;,</span><br><span class="line">    &#123;<span class="string">"sleep"</span>,            <span class="string">"(J)V"</span>,       (<span class="keyword">void</span> *)&amp;JVM_Sleep&#125;,</span><br><span class="line">    &#123;<span class="string">"currentThread"</span>,    <span class="string">"()"</span> THD,     (<span class="keyword">void</span> *)&amp;JVM_CurrentThread&#125;,</span><br><span class="line">    &#123;<span class="string">"countStackFrames"</span>, <span class="string">"()I"</span>,        (<span class="keyword">void</span> *)&amp;JVM_CountStackFrames&#125;,</span><br><span class="line">    &#123;<span class="string">"interrupt0"</span>,       <span class="string">"()V"</span>,        (<span class="keyword">void</span> *)&amp;JVM_Interrupt&#125;,</span><br><span class="line">    &#123;<span class="string">"isInterrupted"</span>,    <span class="string">"(Z)Z"</span>,       (<span class="keyword">void</span> *)&amp;JVM_IsInterrupted&#125;,</span><br><span class="line">    &#123;<span class="string">"holdsLock"</span>,        <span class="string">"("</span> OBJ <span class="string">")Z"</span>, (<span class="keyword">void</span> *)&amp;JVM_HoldsLock&#125;,</span><br><span class="line">    &#123;<span class="string">"getThreads"</span>,        <span class="string">"()["</span> THD,   (<span class="keyword">void</span> *)&amp;JVM_GetAllThreads&#125;,</span><br><span class="line">    &#123;<span class="string">"dumpThreads"</span>,      <span class="string">"(["</span> THD <span class="string">")[["</span> STE, (<span class="keyword">void</span> *)&amp;JVM_DumpThreads&#125;,</span><br><span class="line">    &#123;<span class="string">"setNativeName"</span>,    <span class="string">"("</span> STR <span class="string">")V"</span>, (<span class="keyword">void</span> *)&amp;JVM_SetNativeThreadName&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>发现，start0方法是通过JVM_StartThread方法实现的。Thread.c的头文件里有一个#include “jvm.h”，而JVM_StartThread方法以JVM开头，所以应该在jvm对应的C程序里。jvm的C程序地址如下：</p><p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/111b95ad4584/src/share/vm/prims/jvm.cpp" target="_blank" rel="noopener">http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/111b95ad4584/src/share/vm/prims/jvm.cpp</a></p><p>搜索JVM_StartThread字段，找出与JVM_StartThread相关的内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.lang.Thread //////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// In most of the JVM Thread support functions we need to be sure to lock the Threads_lock</span></span><br><span class="line"><span class="comment">// to prevent the target thread from exiting after we have a pointer to the C++ Thread or</span></span><br><span class="line"><span class="comment">// OSThread objects.  The exception to this rule is when the target object is the thread</span></span><br><span class="line"><span class="comment">// doing the operation, in which case we know that the thread won't exit until the</span></span><br><span class="line"><span class="comment">// operation is done (all exits being voluntary).  There are a few cases where it is</span></span><br><span class="line"><span class="comment">// rather silly to do operations on yourself, like resuming yourself or asking whether</span></span><br><span class="line"><span class="comment">// you are alive.  While these can still happen, they are not subject to deadlocks if</span></span><br><span class="line"><span class="comment">// the lock is held while the operation occurs (this is not the case for suspend, for</span></span><br><span class="line"><span class="comment">// instance), and are very unlikely.  Because IsAlive needs to be fast and its</span></span><br><span class="line"><span class="comment">// implementation is local to this file, we always lock Threads_lock for that one.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thread_entry</span><span class="params">(JavaThread* thread, TRAPS)</span> </span>&#123;</span><br><span class="line">  <span class="function">HandleMark <span class="title">hm</span><span class="params">(THREAD)</span></span>;</span><br><span class="line">  <span class="function">Handle <span class="title">obj</span><span class="params">(THREAD, thread-&gt;threadObj())</span></span>;</span><br><span class="line">  <span class="function">JavaValue <span class="title">result</span><span class="params">(T_VOID)</span></span>;</span><br><span class="line">  JavaCalls::call_virtual(&amp;result,</span><br><span class="line">                          obj,</span><br><span class="line">                          KlassHandle(THREAD, SystemDictionary::Thread_klass()),</span><br><span class="line">                          vmSymbols::run_method_name(),</span><br><span class="line">                          vmSymbols::void_method_signature(),</span><br><span class="line">                          THREAD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JVM_ENTRY(<span class="keyword">void</span>, JVM_StartThread(JNIEnv* env, jobject jthread))</span><br><span class="line">  JVMWrapper(<span class="string">"JVM_StartThread"</span>);</span><br><span class="line">  JavaThread *native_thread = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We cannot hold the Threads_lock when we throw an exception,</span></span><br><span class="line">  <span class="comment">// due to rank ordering issues. Example:  we might need to grab the</span></span><br><span class="line">  <span class="comment">// Heap_lock while we construct the exception.</span></span><br><span class="line">  <span class="keyword">bool</span> throw_illegal_thread_state = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We must release the Threads_lock before we can post a jvmti event</span></span><br><span class="line">  <span class="comment">// in Thread::start.</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Ensure that the C++ Thread and OSThread structures aren't freed before</span></span><br><span class="line">    <span class="comment">// we operate.</span></span><br><span class="line">    <span class="function">MutexLocker <span class="title">mu</span><span class="params">(Threads_lock)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Since JDK 5 the java.lang.Thread threadStatus is used to prevent</span></span><br><span class="line">    <span class="comment">// re-starting an already started thread, so we should usually find</span></span><br><span class="line">    <span class="comment">// that the JavaThread is null. However for a JNI attached thread</span></span><br><span class="line">    <span class="comment">// there is a small window between the Thread object being created</span></span><br><span class="line">    <span class="comment">// (with its JavaThread set) and the update to its threadStatus, so we</span></span><br><span class="line">    <span class="comment">// have to check for this</span></span><br><span class="line">    <span class="keyword">if</span> (java_lang_Thread::thread(JNIHandles::resolve_non_null(jthread)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      throw_illegal_thread_state = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// We could also check the stillborn flag to see if this thread was already stopped, but</span></span><br><span class="line">      <span class="comment">// for historical reasons we let the thread detect that itself when it starts running</span></span><br><span class="line"></span><br><span class="line">      jlong size =</span><br><span class="line">             java_lang_Thread::stackSize(JNIHandles::resolve_non_null(jthread));</span><br><span class="line">      <span class="comment">// Allocate the C++ Thread structure and create the native thread.  The</span></span><br><span class="line">      <span class="comment">// stack size retrieved from java is signed, but the constructor takes</span></span><br><span class="line">      <span class="comment">// size_t (an unsigned type), so avoid passing negative values which would</span></span><br><span class="line">      <span class="comment">// result in really large stacks.</span></span><br><span class="line">      <span class="keyword">size_t</span> sz = size &gt; <span class="number">0</span> ? (<span class="keyword">size_t</span>) size : <span class="number">0</span>;</span><br><span class="line">      native_thread = <span class="keyword">new</span> JavaThread(&amp;thread_entry, sz);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// At this point it may be possible that no osthread was created for the</span></span><br><span class="line">      <span class="comment">// JavaThread due to lack of memory. Check for this situation and throw</span></span><br><span class="line">      <span class="comment">// an exception if necessary. Eventually we may want to change this so</span></span><br><span class="line">      <span class="comment">// that we only grab the lock if the thread was created successfully -</span></span><br><span class="line">      <span class="comment">// then we can also do this check and throw the exception in the</span></span><br><span class="line">      <span class="comment">// JavaThread constructor.</span></span><br><span class="line">      <span class="keyword">if</span> (native_thread-&gt;osthread() != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// Note: the current thread is not being used within "prepare".</span></span><br><span class="line">        native_thread-&gt;prepare(jthread);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (throw_illegal_thread_state) &#123;</span><br><span class="line">    THROW(vmSymbols::java_lang_IllegalThreadStateException());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  assert(native_thread != <span class="literal">NULL</span>, <span class="string">"Starting null thread?"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (native_thread-&gt;osthread() == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// No one should hold a reference to the 'native_thread'.</span></span><br><span class="line">    <span class="keyword">delete</span> native_thread;</span><br><span class="line">    <span class="keyword">if</span> (JvmtiExport::should_post_resource_exhausted()) &#123;</span><br><span class="line">      JvmtiExport::post_resource_exhausted(</span><br><span class="line">        JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR | JVMTI_RESOURCE_EXHAUSTED_THREADS,</span><br><span class="line">        <span class="string">"unable to create new native thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    THROW_MSG(vmSymbols::java_lang_OutOfMemoryError(),</span><br><span class="line">              <span class="string">"unable to create new native thread"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Thread::start(native_thread);</span><br></pre></td></tr></table></figure><p>找出关键语句：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">native_thread = <span class="keyword">new</span> JavaThread(&amp;thread_entry, sz);</span><br></pre></td></tr></table></figure><p>这句话新建了一个java线程，并传入了一个thread_entry。thread_entry的内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thread_entry</span><span class="params">(JavaThread* thread, TRAPS)</span> </span>&#123;</span><br><span class="line">  <span class="function">HandleMark <span class="title">hm</span><span class="params">(THREAD)</span></span>;</span><br><span class="line">  <span class="function">Handle <span class="title">obj</span><span class="params">(THREAD, thread-&gt;threadObj())</span></span>;</span><br><span class="line">  <span class="function">JavaValue <span class="title">result</span><span class="params">(T_VOID)</span></span>;</span><br><span class="line">  JavaCalls::call_virtual(&amp;result,</span><br><span class="line">                          obj,</span><br><span class="line">                          KlassHandle(THREAD, SystemDictionary::Thread_klass()),</span><br><span class="line">                          vmSymbols::run_method_name(), <span class="comment">// </span></span><br><span class="line">                          vmSymbols::void_method_signature(),</span><br><span class="line">                          THREAD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在thread_entry方法中，JavaCalls调用了Java虚拟机，并传入run_method_name()。也就是说，new 了一个java线程，并用这个线程去执行run方法。</p><p>总结一下，start()方法的调用过程如下：</p><p><img src="/2019/03/09/Java线程中start方法和run方法的区别/start方法执行过程.jpg" alt="start方法调用过程"></p><p>所以，<strong>调用start()方法会创建一个新的子线程并启动，调用run()方法只相当于一个普通方法的调用。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java中执行一个线程需要重写&lt;code&gt;Thread&lt;/code&gt;类中的&lt;code&gt;run()&lt;/code&gt;方法，而在Thread类中还存在一个&lt;code&gt;start()&lt;/code&gt;方法。本文将分析start()方法和run()方法的区别。&lt;/p&gt;
&lt;p&gt;首先看一段ja
      
    
    </summary>
    
      <category term="java" scheme="https://njustlcx.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://njustlcx.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>redis基础</title>
    <link href="https://njustlcx.github.io/2019/02/17/redis%E5%9F%BA%E7%A1%80/"/>
    <id>https://njustlcx.github.io/2019/02/17/redis基础/</id>
    <published>2019-02-17T01:44:47.000Z</published>
    <updated>2019-02-17T13:29:30.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是redis"><a href="#什么是redis" class="headerlink" title="什么是redis"></a>什么是redis</h1><p>redis是一个键值对形式的存储系统。支持多种语言，如C, Java, Python等。</p><h1 id="redis应用场景"><a href="#redis应用场景" class="headerlink" title="redis应用场景"></a>redis应用场景</h1><p>redis可以应用于数据缓存，消息队列，排行榜或者计数，发布和订阅消息，商品列表评论列表等方面。</p><h1 id="redis的数据类型"><a href="#redis的数据类型" class="headerlink" title="redis的数据类型"></a>redis的数据类型</h1><p>redis包括5种数据类型，分别是字符串(string)，哈希(hash)，列表(list)，集合(set)以及有序集(zset)。</p><h2 id="字符串相关操作"><a href="#字符串相关操作" class="headerlink" title="字符串相关操作"></a>字符串相关操作</h2><p><img src="/2019/02/17/redis基础/字符串类型操作.png" alt="字符串类型操作"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br><span class="line">mset key1 value1 key2 value2 ...</span><br><span class="line">get key</span><br><span class="line">mget key1 key2 key3 ...</span><br></pre></td></tr></table></figure><h2 id="哈希相关操作"><a href="#哈希相关操作" class="headerlink" title="哈希相关操作"></a>哈希相关操作</h2><p><img src="/2019/02/17/redis基础/hash类型操作.png" alt="hash类型操作"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hset key field value</span><br><span class="line">hget key field</span><br><span class="line">hmset key field1 value1 field2 value ...</span><br><span class="line">hget key field1 field2 field3</span><br></pre></td></tr></table></figure><h2 id="列表相关操作"><a href="#列表相关操作" class="headerlink" title="列表相关操作"></a>列表相关操作</h2><p><img src="/2019/02/17/redis基础/列表相关操作.png" alt="列表相关操作"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lpush key value1 value2 ...</span><br><span class="line">rpush key value1 value2 ...</span><br><span class="line">lrange key start end</span><br><span class="line">llen key</span><br></pre></td></tr></table></figure><h2 id="集合相关操作"><a href="#集合相关操作" class="headerlink" title="集合相关操作"></a>集合相关操作</h2><p><img src="/2019/02/17/redis基础/集合相关操作.png" alt="集合相关操作"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sadd key member</span><br><span class="line">srem key member</span><br><span class="line">smembers key</span><br></pre></td></tr></table></figure><h2 id="有序集相关操作"><a href="#有序集相关操作" class="headerlink" title="有序集相关操作"></a>有序集相关操作</h2><p><img src="/2019/02/17/redis基础/有序集相关操作.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zadd key score value</span><br><span class="line">zcount key min max</span><br><span class="line">zrem key value</span><br><span class="line">zrangebyscore key min max</span><br></pre></td></tr></table></figure><h1 id="redis的服务相关命令"><a href="#redis的服务相关命令" class="headerlink" title="redis的服务相关命令"></a>redis的服务相关命令</h1><p>select 数据库</p><p>info</p><p>config get</p><p>flushdb</p><h1 id="redis的发布和订阅"><a href="#redis的发布和订阅" class="headerlink" title="redis的发布和订阅"></a>redis的发布和订阅</h1><p>订阅：subscribe channel1 channel2 …</p><p>发布：publish channel message</p><p><img src="/2019/02/17/redis基础/redis的发布和订阅.png" alt="redis的发布和订阅"></p><h1 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h1><p>第一种方式是快照</p><p>save 60 900。60秒内至少有900次数据变动，就保存一次快照。</p><p>第二种方式是附加文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是redis&quot;&gt;&lt;a href=&quot;#什么是redis&quot; class=&quot;headerlink&quot; title=&quot;什么是redis&quot;&gt;&lt;/a&gt;什么是redis&lt;/h1&gt;&lt;p&gt;redis是一个键值对形式的存储系统。支持多种语言，如C, Java, Python等。&lt;/
      
    
    </summary>
    
    
      <category term="redis" scheme="https://njustlcx.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Java面试通关要点汇总集(自答案)</title>
    <link href="https://njustlcx.github.io/2019/01/30/Java%E9%9D%A2%E8%AF%95%E9%80%9A%E5%85%B3%E8%A6%81%E7%82%B9%E6%B1%87%E6%80%BB%E9%9B%86-%E8%87%AA%E7%AD%94%E6%A1%88/"/>
    <id>https://njustlcx.github.io/2019/01/30/Java面试通关要点汇总集-自答案/</id>
    <published>2019-01-30T12:39:24.000Z</published>
    <updated>2019-01-31T13:38:54.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本功"><a href="#基本功" class="headerlink" title="基本功"></a>基本功</h1><h2 id="面上对象的特征"><a href="#面上对象的特征" class="headerlink" title="面上对象的特征"></a>面上对象的特征</h2><p>面向对象的基本特征是<strong>封装</strong>，<strong>继承</strong>和<strong>多态</strong>。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装是指各个类对自己的属性进行封装，属性私有化。在java中，使用<code>private</code>关键字对类的属性进行私有化。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在java中，如果一个类没有被final修饰，那么这个类可以被继承。如果类A继承于类B，那么称类A为类B的子类，B类称为A类的父类或者超类或者基类。子类可以继承父类的属性和方法。子类可以对父类进行扩展，子类可以重写父类的方法。如果子类调用一个方法，会先在子类中查找有没有定义这个方法，如果定义了，则调用子类的方法，如果没有，则调用父类中的同名方法。任何类都继承于Object类，也就是说Object类是所类的父类。</p><p>在java中，用<code>extends</code>关键字表示继承关系。一个类的直接父类只能有一个。<code>extends</code>的使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person needs to eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"More walking, more healthy!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String stuId;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.stuId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuId</span><span class="params">(String stuId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuId = stuId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student needs to eat."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.eat();</span><br><span class="line">        stu.walk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student needs to eat.</span><br><span class="line">More walking, more healthy!</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态指一个类具有多种形态。</p><h2 id="final-finally-finalize-的区别"><a href="#final-finally-finalize-的区别" class="headerlink" title="final, finally, finalize 的区别"></a>final, finally, finalize 的区别</h2><p>被final修饰的类无法被继承，被<code>final</code>修饰的属性初始化后不可以被修改，被<code>final</code>修饰的方法不能被重写。</p><p>finally是在捕获异常时配合使用的，在不管是否发生异常，都会执行<code>finally</code>中的语句。如果<code>try</code>或者<code>catch</code>块中的<code>return</code>语句会覆盖<code>finally</code>中的<code>return</code> 语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// finally块中的代码都会被执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>finalize</code>用于构造器的析构。</p><h2 id="int-和-Integer-有什么区别"><a href="#int-和-Integer-有什么区别" class="headerlink" title="int 和 Integer 有什么区别"></a>int 和 Integer 有什么区别</h2><p><code>int</code> 是数据类型，<code>Integer</code>是int的包装类。从<code>int</code>转为<code>Integer</code>叫做自动装箱，由<code>Integer</code>转为<code>int</code>是自动拆箱。</p><h2 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h2><p>子类定义一个与父类方法同名，参数类型相同的方法叫做重写。重载是指方法名相同，但方法的参数类型，参数顺序，参数个数不同的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本功&quot;&gt;&lt;a href=&quot;#基本功&quot; class=&quot;headerlink&quot; title=&quot;基本功&quot;&gt;&lt;/a&gt;基本功&lt;/h1&gt;&lt;h2 id=&quot;面上对象的特征&quot;&gt;&lt;a href=&quot;#面上对象的特征&quot; class=&quot;headerlink&quot; title=&quot;面上对象的特征
      
    
    </summary>
    
      <category term="java" scheme="https://njustlcx.github.io/categories/java/"/>
    
    
      <category term="面试" scheme="https://njustlcx.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>八大排序Java语言描述</title>
    <link href="https://njustlcx.github.io/2019/01/27/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8FJava%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0/"/>
    <id>https://njustlcx.github.io/2019/01/27/八大排序Java语言描述/</id>
    <published>2019-01-27T01:22:24.000Z</published>
    <updated>2019-01-27T01:22:24.530Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pykafka相关问题</title>
    <link href="https://njustlcx.github.io/2019/01/22/pykafka%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>https://njustlcx.github.io/2019/01/22/pykafka相关问题/</id>
    <published>2019-01-22T07:10:51.000Z</published>
    <updated>2019-01-22T07:54:59.527Z</updated>
    
    <content type="html"><![CDATA[<p>pykafka报错：<code>NoBrokersAvailableError</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/threading.py"</span>, line <span class="number">812</span>, <span class="keyword">in</span> __bootstrap_inner</span><br><span class="line">    self.run()</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/threading.py"</span>, line <span class="number">765</span>, <span class="keyword">in</span> run</span><br><span class="line">    self.__target(*self.__args, **self.__kwargs)</span><br><span class="line">  File <span class="string">"kafkaService.py"</span>, line <span class="number">272</span>, <span class="keyword">in</span> run_kafka</span><br><span class="line">    kafka_service = KafkaService()</span><br><span class="line">  File <span class="string">"kafkaService.py"</span>, line <span class="number">121</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    client = KafkaClient(hosts=servers)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/pykafka-2.8.0-py2.7.egg/pykafka/client.py"</span>, line <span class="number">142</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    broker_version=broker_version)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/pykafka-2.8.0-py2.7.egg/pykafka/cluster.py"</span>, line <span class="number">215</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    self.update()</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/pykafka-2.8.0-py2.7.egg/pykafka/cluster.py"</span>, line <span class="number">510</span>, <span class="keyword">in</span> update</span><br><span class="line">    metadata = self._get_metadata()</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/pykafka-2.8.0-py2.7.egg/pykafka/cluster.py"</span>, line <span class="number">305</span>, <span class="keyword">in</span> _get_metadata</span><br><span class="line">    <span class="string">'Unable to connect to a broker to fetch metadata. See logs.'</span>)</span><br><span class="line">NoBrokersAvailableError: Unable to connect to a broker to fetch metadata. See logs.</span><br></pre></td></tr></table></figure><p>kafka报错没找到broker，但linux集群的kafka环境都已经正确启动，感觉有点奇怪。于是根据引文的建议，用ipython调用<code>logging</code>模块找到问题所在。进入ipython。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pykafka <span class="keyword">import</span> KafkaClient</span><br><span class="line"><span class="keyword">import</span> logging <span class="keyword">as</span> log</span><br><span class="line">log.basicConfig(level=log.DEBUG)</span><br><span class="line"><span class="comment"># 然后执行如下语句，日志报错</span></span><br><span class="line">client = KafkaClient(hosts=<span class="string">'192.168.1.230:9092,192.168.1.231:9092,192.168.1.232:9092'</span>)</span><br></pre></td></tr></table></figure><p>报错信息如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">INFO:pykafka.cluster:Discovered <span class="number">3</span> brokers</span><br><span class="line">DEBUG:pykafka.cluster:Discovered broker id <span class="number">0</span>: cmdb1:<span class="number">9092</span></span><br><span class="line">DEBUG:pykafka.connection:Connecting to cmdb1:<span class="number">9092</span></span><br><span class="line">INFO:pykafka.connection:Attempt <span class="number">0</span>: failed to connect to cmdb1:<span class="number">9092</span></span><br><span class="line">INFO:pykafka.connection:[Errno <span class="number">-2</span>] Name <span class="keyword">or</span> service <span class="keyword">not</span> known</span><br><span class="line">INFO:pykafka.connection:Retrying <span class="keyword">in</span> <span class="number">300</span>ms.</span><br><span class="line">INFO:pykafka.connection:Attempt <span class="number">1</span>: failed to connect to cmdb1:<span class="number">9092</span></span><br><span class="line">INFO:pykafka.connection:[Errno <span class="number">-2</span>] Name <span class="keyword">or</span> service <span class="keyword">not</span> known</span><br><span class="line">INFO:pykafka.connection:Retrying <span class="keyword">in</span> <span class="number">300</span>ms.</span><br><span class="line">INFO:pykafka.connection:Attempt <span class="number">2</span>: failed to connect to cmdb1:<span class="number">9092</span></span><br><span class="line">INFO:pykafka.connection:[Errno <span class="number">-2</span>] Name <span class="keyword">or</span> service <span class="keyword">not</span> known</span><br><span class="line">INFO:pykafka.connection:Retrying <span class="keyword">in</span> <span class="number">300</span>ms.</span><br><span class="line">INFO:pykafka.handlers:RequestHandler worker: exiting cleanly</span><br><span class="line">WARNING:pykafka.broker:Failed to connect to broker at cmdb1:<span class="number">9092.</span> Check the `listeners` property <span class="keyword">in</span> server.config.</span><br><span class="line">DEBUG:pykafka.cluster:Discovered broker id <span class="number">1</span>: cmdb2:<span class="number">9092</span></span><br><span class="line">DEBUG:pykafka.connection:Connecting to cmdb2:<span class="number">9092</span></span><br><span class="line">INFO:pykafka.connection:Attempt <span class="number">0</span>: failed to connect to cmdb2:<span class="number">9092</span></span><br><span class="line">INFO:pykafka.connection:[Errno <span class="number">-2</span>] Name <span class="keyword">or</span> service <span class="keyword">not</span> known</span><br><span class="line">INFO:pykafka.connection:Retrying <span class="keyword">in</span> <span class="number">300</span>ms.</span><br><span class="line">INFO:pykafka.connection:Attempt <span class="number">1</span>: failed to connect to cmdb2:<span class="number">9092</span></span><br><span class="line">INFO:pykafka.connection:[Errno <span class="number">-2</span>] Name <span class="keyword">or</span> service <span class="keyword">not</span> known</span><br><span class="line">INFO:pykafka.connection:Retrying <span class="keyword">in</span> <span class="number">300</span>ms.</span><br><span class="line">INFO:pykafka.connection:Attempt <span class="number">2</span>: failed to connect to cmdb2:<span class="number">9092</span></span><br><span class="line">INFO:pykafka.connection:[Errno <span class="number">-2</span>] Name <span class="keyword">or</span> service <span class="keyword">not</span> known</span><br><span class="line">INFO:pykafka.connection:Retrying <span class="keyword">in</span> <span class="number">300</span>ms.</span><br><span class="line">WARNING:pykafka.broker:Failed to connect to broker at cmdb2:<span class="number">9092.</span> Check the `listeners` property <span class="keyword">in</span> server.config.</span><br></pre></td></tr></table></figure><p>发现，cmdb1:9092，cmdb2:9092连接提示Name or service not known，估计原因可能是主机名和ip地址没有对应，于是修改/etc/hosts文件，将cmdb1和cmdb2与相应的ip地址相对应。</p><p>再次在ipython中执行如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pykafka <span class="keyword">import</span> KafkaClient</span><br><span class="line"><span class="keyword">import</span> logging <span class="keyword">as</span> log</span><br><span class="line">log.basicConfig(level=log.DEBUG)</span><br><span class="line"><span class="comment"># 然后执行如下语句，可以正常连接broker</span></span><br><span class="line">client = KafkaClient(hosts=<span class="string">'192.168.1.230:9092,192.168.1.231:9092,192.168.1.232:9092'</span>)</span><br></pre></td></tr></table></figure><p>日志输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:pykafka.cluster:Updating cluster, attempt <span class="number">1</span>/<span class="number">3</span></span><br><span class="line">DEBUG:pykafka.connection:Connecting to <span class="number">192.168</span><span class="number">.1</span><span class="number">.230</span>:<span class="number">9092</span></span><br><span class="line">DEBUG:pykafka.connection:Successfully connected to <span class="number">192.168</span><span class="number">.1</span><span class="number">.230</span>:<span class="number">9092</span></span><br><span class="line">INFO:pykafka.handlers:RequestHandler.stop: about to flush requests queue</span><br><span class="line">INFO:pykafka.cluster:Discovered <span class="number">3</span> brokers</span><br><span class="line">DEBUG:pykafka.cluster:Discovered broker id <span class="number">0</span>: cmdb1:<span class="number">9092</span></span><br><span class="line">DEBUG:pykafka.connection:Connecting to cmdb1:<span class="number">9092</span></span><br><span class="line">DEBUG:pykafka.connection:Successfully connected to cmdb1:<span class="number">9092</span></span><br><span class="line">DEBUG:pykafka.cluster:Discovered broker id <span class="number">1</span>: cmdb2:<span class="number">9092</span></span><br><span class="line">DEBUG:pykafka.connection:Connecting to cmdb2:<span class="number">9092</span></span><br><span class="line">DEBUG:pykafka.connection:Successfully connected to cmdb2:<span class="number">9092</span></span><br><span class="line">DEBUG:pykafka.cluster:Discovered broker id <span class="number">3</span>: cmdb3:<span class="number">9092</span></span><br><span class="line">DEBUG:pykafka.connection:Connecting to cmdb3:<span class="number">9092</span></span><br><span class="line">DEBUG:pykafka.connection:Successfully connected to cmdb3:<span class="number">9092</span></span><br><span class="line">INFO:pykafka.cluster:Discovered <span class="number">11</span> topics</span><br><span class="line">DEBUG:pykafka.cluster:Discovered topic <span class="string">'test3'</span></span><br><span class="line">DEBUG:pykafka.cluster:Discovered topic <span class="string">'test2'</span></span><br><span class="line">DEBUG:pykafka.cluster:Discovered topic <span class="string">'TOPIC_SMS'</span></span><br><span class="line">DEBUG:pykafka.cluster:Discovered topic <span class="string">'cmdb_collect_topic_test'</span></span><br><span class="line">DEBUG:pykafka.cluster:Discovered topic <span class="string">'TOPIC_EMAIL'</span></span><br><span class="line">DEBUG:pykafka.cluster:Discovered topic <span class="string">'ansible_task_test3'</span></span><br><span class="line">DEBUG:pykafka.cluster:Discovered topic <span class="string">'TOPIC_WX'</span></span><br><span class="line">DEBUG:pykafka.cluster:Discovered topic <span class="string">'test'</span></span><br><span class="line">DEBUG:pykafka.cluster:Discovered topic <span class="string">'TOPIC_COMM'</span></span><br><span class="line">DEBUG:pykafka.cluster:Discovered topic <span class="string">'ansible_task_result'</span></span><br></pre></td></tr></table></figure><p>由此，问题得到解决。</p><p>参考：<a href="http://www.voidcn.com/article/p-cjwdleuv-bqm.html" target="_blank" rel="noopener">pykafka常见问题分析与记录</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pykafka报错：&lt;code&gt;NoBrokersAvailableError&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="python" scheme="https://njustlcx.github.io/categories/python/"/>
    
    
      <category term="pykafka" scheme="https://njustlcx.github.io/tags/pykafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka集群搭建</title>
    <link href="https://njustlcx.github.io/2019/01/21/kafka%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>https://njustlcx.github.io/2019/01/21/kafka集群搭建/</id>
    <published>2019-01-21T09:43:14.000Z</published>
    <updated>2019-01-22T01:44:54.389Z</updated>
    
    <content type="html"><![CDATA[<p>转载<a href="https://www.cnblogs.com/luotianshuai/p/5206662.html" target="_blank" rel="noopener">kafka集群搭建</a></p><p>这篇博文写的很详细，成功搭建kafka集群。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载&lt;a href=&quot;https://www.cnblogs.com/luotianshuai/p/5206662.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kafka集群搭建&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇博文写的很详细，成功搭建kafka集群
      
    
    </summary>
    
      <category term="消息队列" scheme="https://njustlcx.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="kafka" scheme="https://njustlcx.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="https://njustlcx.github.io/2019/01/20/%E5%8F%8D%E5%B0%84/"/>
    <id>https://njustlcx.github.io/2019/01/20/反射/</id>
    <published>2019-01-20T02:00:18.000Z</published>
    <updated>2019-01-21T01:32:50.061Z</updated>
    
    <content type="html"><![CDATA[<p>能够分析类能力的程序称为<strong>反射</strong>。</p><h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>在程序运行期间，java运行时系统始终未所有的对象维护一个被称为<strong>运行时</strong>的类型标识。这个信息跟踪着每个对象所属的类。虚拟机利用运行时类型信息选择相应的方法执行。</p><p>可以通过专门的Java类访问这些信息，保存这些信息的类称为<code>Class</code>。<code>Object</code>类中有一个<code>getClass()</code>方法可以返回一个<code>Class</code>类型的实例。一个<code>Class</code>对象将表示一个特定类的属性。最常用的<code>Class</code>方法是<code>getName</code>方法，该方法返回类的名字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employee e = <span class="keyword">new</span> Employee(<span class="string">"xiaoming"</span>, <span class="number">10</span>);</span><br><span class="line">        Class c1 = e.getClass();</span><br><span class="line">        System.out.println(c1.getName()); <span class="comment">// com.reflection.Employee</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用<code>Class</code>类的<code>forName()</code>方法可以获得类名对应的Class对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String className = <span class="string">"java.util.Random"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class c2 = Class.forName(className);</span><br><span class="line">            System.out.println(c2.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法只有在className是类名或者接口名的时候才能够执行。否则将会抛出一个checked exception。</p><p>在启动时，包含main方法的类被加载，它会加载所有需要的类。这些被加载的类又会加载他们需要的类，以此类推。对于一个大型的程序来说，会消耗很多时间。</p><p>如果T是任意类型的Java类型(或者void关键字)，T.class将代表匹配的类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class c1 = Random.class;</span><br><span class="line">Class c2 = <span class="keyword">int</span>.class;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c3</span> </span>= Double[].class;</span><br></pre></td></tr></table></figure><p>一个Class对象实际是一种类型，这个类型不一定是一种类。</p><p>虚拟机为每个类型管理一个Class对象。因此可以用==运算符实现两个类对象比较的操作。</p><p><code>newInstance()</code>方法可以动态的创建一个类的实例。它会调用这个这个类的默认方法，如果该类没有提供默认构造器，那么将会抛出异常。</p><h1 id="利用反射分析类的能力"><a href="#利用反射分析类的能力" class="headerlink" title="利用反射分析类的能力"></a>利用反射分析类的能力</h1><p>检查类的结构。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;能够分析类能力的程序称为&lt;strong&gt;反射&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;Class类&quot;&gt;&lt;a href=&quot;#Class类&quot; class=&quot;headerlink&quot; title=&quot;Class类&quot;&gt;&lt;/a&gt;Class类&lt;/h1&gt;&lt;p&gt;在程序运行期间，java运行
      
    
    </summary>
    
      <category term="java" scheme="https://njustlcx.github.io/categories/java/"/>
    
    
      <category term="反射" scheme="https://njustlcx.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>linux基础知识</title>
    <link href="https://njustlcx.github.io/2019/01/19/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://njustlcx.github.io/2019/01/19/linux基础知识/</id>
    <published>2019-01-19T11:57:37.000Z</published>
    <updated>2019-01-21T02:03:44.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-基础命令"><a href="#linux-基础命令" class="headerlink" title="linux 基础命令"></a>linux 基础命令</h1><h2 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd user # 切换到当前目录下的user目录</span><br><span class="line">cd .. # 打开上一级目录</span><br><span class="line">cd / # 切换到系统根目录</span><br><span class="line">cd ~ # 切换到当前用户的主目录</span><br><span class="line">cd - # 切换到上一个命令所在的目录</span><br></pre></td></tr></table></figure><h2 id="目录的操作命令-增删改查"><a href="#目录的操作命令-增删改查" class="headerlink" title="目录的操作命令(增删改查)"></a>目录的操作命令(增删改查)</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir mydir # 在当前目录下创建mydir目录</span><br><span class="line">mkdir -p lcx/test # 在当前的lcx目录下创建test目录，如果lcx目录不存在，则创建</span><br></pre></td></tr></table></figure><h3 id="查看目录信息"><a href="#查看目录信息" class="headerlink" title="查看目录信息"></a>查看目录信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls # 查看当前目录下的文件(不包括以"."开头的文件)</span><br><span class="line">ls -a # 查看当前目录下的所有文件（包括以 "." 开头的文件)</span><br><span class="line">ll # ls -l的缩写。查看当前目录下所有文件和目录的详细信息(我一般使用这个命令查看权限较多)</span><br></pre></td></tr></table></figure><h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><p>用法：find 目录 参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find . # 列出当前目录以及子目录下的所有文件和文件夹</span><br><span class="line">find / -name "*.txt" # 找出系统根目录下以.txt结尾的文件</span><br><span class="line">find / -iname "*.txt" # 同上，但忽略大小写</span><br></pre></td></tr></table></figure><h3 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h3><p>mv命令可以对目录、文件进行重命名，也可以将一个文件从一个目录移动到另一个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv lcx user # 将lcx目录重新命名为user目录</span><br><span class="line">mv lcx.txt ../user # 将lcx.txt从当前目录移动到上级目录的user目录</span><br></pre></td></tr></table></figure><h3 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h3><p>cp命令对文件和目录进行复制。用法：cp 目录名称 目标目录名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -r lcx lcx2 # 将lcx目录复制到lcx2目录，-r表示递归复制</span><br><span class="line">cp lcx.txt lcx2.txt # 将lcx.txt 复制一份到lcx2.txt</span><br></pre></td></tr></table></figure><h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf lcx # 删除lcx目录</span><br></pre></td></tr></table></figure><h2 id="文件操作相关命令"><a href="#文件操作相关命令" class="headerlink" title="文件操作相关命令"></a>文件操作相关命令</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 1.txt # 创建1.txt</span><br></pre></td></tr></table></figure><h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.txt # 查看1.txt的内容</span><br></pre></td></tr></table></figure><h3 id="编辑文件内容"><a href="#编辑文件内容" class="headerlink" title="编辑文件内容"></a>编辑文件内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 1.txt # 编辑1.txt。按i进入vim的编辑模式，编辑好之后按ESC进入命令模式，最后按":wq"保存编辑好的文件并退出</span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf 1.txt # 删除1.txt</span><br></pre></td></tr></table></figure><h2 id="权限命令"><a href="#权限命令" class="headerlink" title="权限命令"></a>权限命令</h2><p>操作系统中每个文件都有特定的权限，所属用户和组。权限分为三种：读(r)、写(w)、执行(x)。通过ll命令可以查看文件权限。</p><p><img src="/2019/01/19/linux基础知识/权限信息.jpg" alt="权限信息"></p><h3 id="文件类型："><a href="#文件类型：" class="headerlink" title="文件类型："></a>文件类型：</h3><p>d表示目录，-表示文件，l表示链接</p><h3 id="权限类型"><a href="#权限类型" class="headerlink" title="权限类型"></a>权限类型</h3><p>读：用r表示，也可以用数字4表示</p><p>写：用w表示，也可以用数字2表示</p><p>执行：用x表示，也可以用数字1表示</p><p>对于文件：</p><table><thead><tr><th>权限名称</th><th>可执行操作</th></tr></thead><tbody><tr><td>r</td><td>可以使用cat查看文件的内容</td></tr><tr><td>w</td><td>可以修改文件的内容</td></tr><tr><td>x</td><td>可以将其运行为二进制文件</td></tr></tbody></table><p>对于目录：</p><table><thead><tr><th>权限名称</th><th>可执行操作</th></tr></thead><tbody><tr><td>r</td><td>可以查看目录下列表</td></tr><tr><td>w</td><td>可以创建和删除目录下文件</td></tr><tr><td>x</td><td>可以使用cd进入目录</td></tr></tbody></table><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 lcx.txt # 设置lcx.txt的权限为所属者为读写执行(4+2+1)，该文件所在组的用户和其他用户执行权限为读和执行(4+1)</span><br><span class="line">chown shqz lcx.txt # 设置lcx.txt的所属者为shqz</span><br><span class="line">chgrp shqz lcx.txt # 修改lcx.txt的所在的组为shqz</span><br></pre></td></tr></table></figure><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep kafka # 查看包括kafka字符串的进程</span><br><span class="line">ps aux | grep kafka # 同上，只是表示格式不同</span><br><span class="line">kill -9 进程的pid # -9 表示强制杀死进程</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux-基础命令&quot;&gt;&lt;a href=&quot;#linux-基础命令&quot; class=&quot;headerlink&quot; title=&quot;linux 基础命令&quot;&gt;&lt;/a&gt;linux 基础命令&lt;/h1&gt;&lt;h2 id=&quot;切换目录&quot;&gt;&lt;a href=&quot;#切换目录&quot; class=&quot;head
      
    
    </summary>
    
      <category term="linux" scheme="https://njustlcx.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://njustlcx.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>nexus安装步骤</title>
    <link href="https://njustlcx.github.io/2019/01/18/nexus%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
    <id>https://njustlcx.github.io/2019/01/18/nexus安装步骤/</id>
    <published>2019-01-18T10:10:45.000Z</published>
    <updated>2019-01-21T02:09:52.985Z</updated>
    
    <content type="html"><![CDATA[<p>拉取安装包(nexus-3.15.1-01-unix.tar.gz)到指定目录<br>打开8081端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nexus-3.15.1-01-unix.tar.gz</span><br><span class="line">cd nexus-3.15.1-01/bin</span><br><span class="line">./nexus run &amp;</span><br></pre></td></tr></table></figure><p>启动成功即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;拉取安装包(nexus-3.15.1-01-unix.tar.gz)到指定目录&lt;br&gt;打开8081端口&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="java" scheme="https://njustlcx.github.io/categories/java/"/>
    
    
      <category term="nexus" scheme="https://njustlcx.github.io/tags/nexus/"/>
    
      <category term="java" scheme="https://njustlcx.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java值传递</title>
    <link href="https://njustlcx.github.io/2019/01/18/Java%E5%80%BC%E4%BC%A0%E9%80%92/"/>
    <id>https://njustlcx.github.io/2019/01/18/Java值传递/</id>
    <published>2019-01-18T09:08:35.000Z</published>
    <updated>2019-01-18T09:08:35.707Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux免密登录</title>
    <link href="https://njustlcx.github.io/2019/01/18/linux%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <id>https://njustlcx.github.io/2019/01/18/linux免密登录/</id>
    <published>2019-01-18T08:40:33.000Z</published>
    <updated>2019-02-17T14:32:57.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>两台主机：192.168.1.230 192.168.1.231。现在需要通过ssh，实现192.168.1.230到231的免密登录。</p><h1 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h1><p>在192.168.1.230上生成一对密钥，一个作为公钥，一个作为s私钥。如果已有对应的公钥和私钥，则不需要这一步。命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>一直按回车就行。</p><p><img src="/2019/01/18/linux免密登录/1547801329751.png" alt="1547801329751"></p><p>出现红框内的图案表示密钥生成成功。可以发现用户的.ssh目录下出现了id_rsa和id_rsa.pub，前者为私钥，后者为公钥。</p><p><img src="/2019/01/18/linux免密登录/1547801391719.png" alt="1547801391719"></p><h1 id="部署公钥到目标主机"><a href="#部署公钥到目标主机" class="headerlink" title="部署公钥到目标主机"></a>部署公钥到目标主机</h1><p>在当前服务器执行ssh-copy-id命令，将公钥部署到目标服务器，用法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令格式：ssh-copy-id 用户名@ip地址</span></span><br><span class="line">ssh-copy-id shqz@192.168.1.231</span><br></pre></td></tr></table></figure><p>执行这条命令之后需要输入目标主机的登录密码，输入之后即可进行免密登录。</p><p><img src="/2019/01/18/linux免密登录/1547801757766.png" alt="1547801757766"></p><p>出现上图表示公钥部署成功。</p><h1 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h1><p>前面已经将密钥配置完成，最后只需要执行如下ssh命令即可免密登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh shqz@192.168.1.231</span><br></pre></td></tr></table></figure><p><img src="/2019/01/18/linux免密登录/1547801961174.png" alt="1547801961174"></p><p>发现，无需输入密码就登录到目标主机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;两台主机：192.168.1.230 192.168.1.231。现在需要通过ssh，实现192.168.1.230到231的免密登录。&lt;/
      
    
    </summary>
    
      <category term="linux" scheme="https://njustlcx.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://njustlcx.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ansible问题记录</title>
    <link href="https://njustlcx.github.io/2019/01/18/ansible%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://njustlcx.github.io/2019/01/18/ansible问题记录/</id>
    <published>2019-01-18T08:21:37.000Z</published>
    <updated>2019-01-18T08:34:27.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于aix"><a href="#关于aix" class="headerlink" title="关于aix"></a>关于aix</h1><h2 id="ansible连接不了aix服务器"><a href="#ansible连接不了aix服务器" class="headerlink" title="ansible连接不了aix服务器"></a>ansible连接不了aix服务器</h2><p>首先判断是不是aix服务器上没有python环境，如果没有，需要先安装合适版本的python环境。发现安装python环境之后依旧连接不上，不知道问题在哪。后来尝试加入连接方式，使用命令行参数-c，指定连接方式为paramiko，就连接成功了。</p><h2 id="ansible无法执行aix的任务"><a href="#ansible无法执行aix的任务" class="headerlink" title="ansible无法执行aix的任务"></a>ansible无法执行aix的任务</h2><p>使用raw模块在aix上执行playbook的任务，发现卡住，但之前gather_facts已经跑通了。由此可知ansible可以在aix上跑任务，怀疑是raw模块的原因。于是将raw模块换成shell模块，成功执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于aix&quot;&gt;&lt;a href=&quot;#关于aix&quot; class=&quot;headerlink&quot; title=&quot;关于aix&quot;&gt;&lt;/a&gt;关于aix&lt;/h1&gt;&lt;h2 id=&quot;ansible连接不了aix服务器&quot;&gt;&lt;a href=&quot;#ansible连接不了aix服务器&quot; class
      
    
    </summary>
    
      <category term="ansible" scheme="https://njustlcx.github.io/categories/ansible/"/>
    
    
      <category term="ansible" scheme="https://njustlcx.github.io/tags/ansible/"/>
    
      <category term="aix" scheme="https://njustlcx.github.io/tags/aix/"/>
    
  </entry>
  
  <entry>
    <title>设计模式Java实现</title>
    <link href="https://njustlcx.github.io/2019/01/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FJava%E5%AE%9E%E7%8E%B0/"/>
    <id>https://njustlcx.github.io/2019/01/18/设计模式Java实现/</id>
    <published>2019-01-18T07:55:42.000Z</published>
    <updated>2019-01-18T08:05:36.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><p>设计模式总体来说分为三大类：</p><p>1 创建者模式，共五种：工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式</p><p>2 结构型模式，共七种：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式</p><p>3 行为型模式：共十一种：策略模式，模板方法模式，观察者模式，迭代子模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式。</p><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><h3 id="总原则：开闭原则"><a href="#总原则：开闭原则" class="headerlink" title="总原则：开闭原则"></a>总原则：开闭原则</h3><p>开闭原则就是说<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用<strong>接口和抽象类</strong>等，后面的具体设计中我们会提到这点。</p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>每个类应该实现单一的职责，如若不然，应该把类拆分</p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p><strong>面向接口编程</strong>，依赖于抽象而不依赖于具体。写代码用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>每个接口不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口比使用单个接口要好。</p><h3 id="迪米特原则（最少知道原则）"><a href="#迪米特原则（最少知道原则）" class="headerlink" title="迪米特原则（最少知道原则）"></a>迪米特原则（最少知道原则）</h3><p>一个类对自己依赖的类知道的越少越好。无论被依赖的类有多复杂，都应该将逻辑分装在方法的内部，通过public方法提供给外部。这样被依赖的类变化时，才能最小的影响该类。</p><p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为<strong>成员变量、方法参数、方法返回值</strong>中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>原则上尽量首先使用合成/聚合的方式，而不是使用继承。</p><h2 id="23种设计模式（基于Java"><a href="#23种设计模式（基于Java" class="headerlink" title="23种设计模式（基于Java)"></a>23种设计模式（基于Java)</h2><h3 id="创建模式"><a href="#创建模式" class="headerlink" title="创建模式"></a>创建模式</h3><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>简单工厂模式不属于23种设计模式之一。简单工厂一般分为：<strong>普通</strong>简单工厂、<strong>多方法</strong>简单工厂、<strong>静态方法</strong>简单工厂。</p><h5 id="普通简单工厂"><a href="#普通简单工厂" class="headerlink" title="普通简单工厂"></a>普通简单工厂</h5><p>就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建共同接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a mail sender"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a sms sender"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"mail"</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"sms"</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Please input the right type!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SendFactory sendFactory = <span class="keyword">new</span> SendFactory();</span><br><span class="line">        Sender sender = sendFactory.produce(<span class="string">"sms"</span>);</span><br><span class="line">        sender.send();<span class="comment">// 输出：This is a sms sender</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多方法简单工厂"><a href="#多方法简单工厂" class="headerlink" title="多方法简单工厂"></a>多方法简单工厂</h5><p>是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactoryMulti</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceSms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTestMulti</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SendFactoryMulti sendFactoryMulti = <span class="keyword">new</span> SendFactoryMulti();</span><br><span class="line">        Sender sender = sendFactoryMulti.produceSms();</span><br><span class="line">        sender.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多个静态方法"><a href="#多个静态方法" class="headerlink" title="多个静态方法"></a>多个静态方法</h5><p>将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactoryStatic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceSms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">producerMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTestStatic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sender sender = SendFactoryStatic.producerMail();</span><br><span class="line">        sender.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。</p><h4 id="工厂方法模式（Factory-Method）"><a href="#工厂方法模式（Factory-Method）" class="headerlink" title="工厂方法模式（Factory Method）"></a>工厂方法模式（Factory Method）</h4><p>简单工厂模式有一个问题，类的创建依赖于工厂类，也就是说想要拓展程序必须修改工厂类，违背了闭包原则。如何解决？工厂方法模式，创建一个工厂接口和创建多个工厂的实现类，这样一旦添加新的功能，直接添加新的工厂类就可以了，不需要修改之前的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mail Sender"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sms Sender"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">producer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendSmsFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Provider provider = <span class="keyword">new</span> SendMailFactory();</span><br><span class="line">        Sender sender = provider.producer();</span><br><span class="line">        sender.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：</p><p>1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</p><p>2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</p><p>3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有构造方法，防止被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用一个内部类来维护单利</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonFactory.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果该对象被用于序列化，可保证对象在序列化前后保持一致</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonTest();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            syncInit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、单例模式理解起来简单，但是具体实现起来还是有一定的难度。</p><p>2、synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。</p><h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>原型模式虽然为创建型模式，但与工程模式没有关系，该模式的思想是将一个对象作为原型，对其进行复制，克隆，产生一个和原对象类似的新对象。在java中，复制对象是通过clone()实现的，先创建一个原型类：</p><p>参考：<br>[1]: <a href="https://www.cnblogs.com/geek6/p/3951677.html" target="_blank" rel="noopener">https://www.cnblogs.com/geek6/p/3951677.html</a>    “23种设计模式全解析”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;设计模式的分类&quot;&gt;&lt;a href=&quot;#设计模式的分类&quot; class=&quot;headerlink&quot; title=&quot;设计模
      
    
    </summary>
    
      <category term="设计模式" scheme="https://njustlcx.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="https://njustlcx.github.io/tags/java/"/>
    
      <category term="设计模式" scheme="https://njustlcx.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ansible基础之inventory</title>
    <link href="https://njustlcx.github.io/2019/01/18/ansible%E5%9F%BA%E7%A1%80%E4%B9%8Binventory/"/>
    <id>https://njustlcx.github.io/2019/01/18/ansible基础之inventory/</id>
    <published>2019-01-18T06:13:01.000Z</published>
    <updated>2019-01-18T09:31:30.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="inventory的定义"><a href="#inventory的定义" class="headerlink" title="inventory的定义"></a>inventory的定义</h1><p>inventory是ansible里面用来管理主机的文件，在inventory文件里面，有组的概念，主机的概念，还可以定义inventory变量。inventory文件的示例如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span> </span><br><span class="line">192.168.1.200</span><br><span class="line">192.168.1.201</span><br><span class="line">192.168.1.202</span><br><span class="line"><span class="section">[ams]</span></span><br><span class="line">192.168.1.220</span><br><span class="line">192.168.1.221</span><br><span class="line"><span class="section">[db: children]</span></span><br><span class="line">mysql</span><br></pre></td></tr></table></figure><h1 id="组和主机"><a href="#组和主机" class="headerlink" title="组和主机"></a>组和主机</h1><p>在inventory里面，组是一个逻辑上的概念，用来描述一组主机是来干什么的。组的定义通过一对中括号括起来，里面填写组的名字。如示例1所示，mysql和ams就是就是这个inventory文件里面定义的两个组。mysql组可能用来部署数据库服务器，ams组可能会用来部署ams应用。一个组下面的主机是属于这个组，一个主机可以属于多个组。</p><h1 id="主机变量"><a href="#主机变量" class="headerlink" title="主机变量"></a>主机变量</h1><p>可以在inventory文件里定义主机变量。格式如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span> </span><br><span class="line">192.168.1.200 ansible_ssh_user=mysql ansible_ssh_pass=mysql</span><br><span class="line">192.168.1.201</span><br><span class="line">192.168.1.202</span><br><span class="line"><span class="section">[ams]</span></span><br><span class="line">192.168.1.220</span><br><span class="line">192.168.1.221</span><br><span class="line"><span class="section">[db: children]</span></span><br><span class="line">mysql</span><br></pre></td></tr></table></figure><p>ansible_ssh_user和ansible_ssh_pass是主机192.168.1.200的主机变量，分别表示连接这台主机的用户名和密码。这两个变量属于ansible的内置变量，也可以定义自己的变量。</p><h1 id="组变量"><a href="#组变量" class="headerlink" title="组变量"></a>组变量</h1><p>组变量是属于某个组的变量，这个组里面的主机都能够使用这个变量。组变量的定义方式如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span> </span><br><span class="line">192.168.1.200 ansible_ssh_user=mysql ansible_ssh_pass=mysql</span><br><span class="line">192.168.1.201</span><br><span class="line">192.168.1.202</span><br><span class="line"><span class="section">[mysql:vars]</span></span><br><span class="line"><span class="attr">ntp_server</span>=ntp.atlanta.example.com</span><br><span class="line"><span class="attr">proxy</span>=proxy.atlanta.example.com</span><br></pre></td></tr></table></figure><p>ntp_server和proxy为mysql这个组的组变量。主机变量的优先级高于组变量，也就是说，如果主机变量和组变量同名，那么主机变量将会覆盖组变量。</p><h1 id="子组"><a href="#子组" class="headerlink" title="子组"></a>子组</h1><p>一个组可以是另一个组的孩子。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span> </span><br><span class="line">192.168.1.200 ansible_ssh_user=mysql ansible_ssh_pass=mysql</span><br><span class="line">192.168.1.201</span><br><span class="line">192.168.1.202</span><br><span class="line"><span class="section">[ams]</span></span><br><span class="line">192.168.1.220</span><br><span class="line">192.168.1.221</span><br><span class="line"><span class="section">[db: children]</span></span><br><span class="line">mysql</span><br></pre></td></tr></table></figure><p>mysql这个组就是db组的孩子。对parent组进行操作，也会对其子组进行同样的操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;inventory的定义&quot;&gt;&lt;a href=&quot;#inventory的定义&quot; class=&quot;headerlink&quot; title=&quot;inventory的定义&quot;&gt;&lt;/a&gt;inventory的定义&lt;/h1&gt;&lt;p&gt;inventory是ansible里面用来管理主机的文件，在
      
    
    </summary>
    
      <category term="ansible" scheme="https://njustlcx.github.io/categories/ansible/"/>
    
    
      <category term="inventory" scheme="https://njustlcx.github.io/tags/inventory/"/>
    
      <category term="ansible" scheme="https://njustlcx.github.io/tags/ansible/"/>
    
  </entry>
  
</feed>
